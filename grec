#!/usr/bin/env perl

# grec: grep grep-context

# $ grep -C 5 foo * | grec grep bar
# ( grep 'bar' from contextual output with 'foo' while maintaining context )
# ( grec understands grep, rg, and ag )

# $ grep qux * | grec -s grep baz
# ( grep 'baz' from output with 'qux' without matching line prefixes )

# Author: Gerald Lai
# License: 0BSD

use warnings;
use strict;

use File::Temp qw(tempfile);

use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(posix_default no_ignore_case pass_through bundling);

my (@grec_args, @grep_cmd);
my $is_cmd = 0;
while (@ARGV) {
    local $_ = shift @ARGV;

    if (!$is_cmd && /^-/) {
        push @grec_args, $_;
        next;
    }

    $is_cmd = 1;
    push @grep_cmd, $_;
}
@ARGV = @grec_args;

my %OPT = (color => 1);
GetOptions( \%OPT,
  "color|c!",
  "single|s!", # treat each line as a group
);

my $new_group = 1;
my @groups;
my @lines; # 0th not used
my $i = 0;

my ($IN, $infile) = tempfile("grec-XXXX", TMPDIR => 1);

while (<STDIN>) {
    chomp;

    if ($_ eq "--") {
        $new_group = 1;
        next;
    }

    ++$i;

    if ($new_group) {
        push @groups, [];
        $new_group = $OPT{single};
    }

    my $group = $groups[-1];
    if (!defined $group->[0]) {
        $group->[0] = $group->[1] = $i;
    } else {
        $group->[1] = $i;
    }

    # grep path:line:col: prefix
    my $prefix = s{^((?:\d+|[^:]+?[-:]\d+)[-:](?:\d+:)?)}{} ? $1 : "";

    $lines[$i] = [ $prefix, $_, $#groups ];

    print $IN $_, "\n";
}

close $IN;

my $inv = 0;
@grep_cmd = grep {
    my $v = /^(-v|--invert-match)$/;
    $inv = 1 if $v;
    !$v;
} @grep_cmd;

my $grep = shift @grep_cmd;
my $is_ag = ($grep =~ /\bag$/);
my $num_arg = $is_ag ? "--numbers" : "-n";
my @cmd = ($grep, $num_arg);
if ($OPT{color} && -t STDOUT) {
    push @cmd, $is_ag ? "--color" : "--color=always";
}

unshift @grep_cmd, @cmd;
push @grep_cmd, $infile;

my %seen_group;

open(my $OUT, "-|", @grep_cmd) or die("Failed to read from (@grep_cmd): $!");

while (<$OUT>) {
    chomp;

    s{^([^:]+):}{};
    my $n = $1;
    $n =~ s/\e([^\[\]]|\[.*?[a-zA-Z]|\].*?\a)//g; # remove escape

    $lines[$n][1] = $_ if !$inv;
    ++$seen_group{ $lines[$n][2] };
}

close $OUT;

my @hits;
if ($inv) {
    @hits = grep { !$seen_group{$_} } 0 .. $#groups;
} else {
    @hits = sort { $a <=> $b } keys %seen_group;
}

for my $j (@hits) {
    my $group = $groups[$j];

    for my $i ($group->[0] .. $group->[1]) {
        print $lines[$i][0], $lines[$i][1], "\n";
    }

    print "--\n" if !$OPT{single};
}

exit 0;
